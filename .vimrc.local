UnBundle 'altercation/vim-colors-solarized'
UnBundle 'vim-scripts/sessionman.vim'
UnBundle 'flazz/vim-colorschemes'
UnBundle 'myusuf3/numbers.vim'
UnBundle 'nathanaelkane/vim-indent-guides'
UnBundle 'spf13/PIV'
UnBundle 'klen/python-mode'
""UnBundle 'python.vim'
""UnBundle 'python_match.vim'
""UnBundle 'pythoncomplete'
""UnBundle 'Lokaltog/powerline'
""UnBundle 'bling/vim-airline'


set encoding=utf-8
 
colorscheme molokai 
""fruity
""ir_black
""molokai
""peaksea
let NERDTreeIgnore=['\.\.$', '\.$', '\~$']
set nolist
let g:indent_guides_enable_on_vim_startup=0

set noexpandtab
set copyindent
"set preserveindent
"set softtabstop=4
"set shiftwidth=4
"set tabstop=4
"
"
"":set guioptions-=m  "remove menu bar
:set guioptions-=T  "remove toolbar
:set guioptions-=r  "remove right-hand scroll bar
:set guioptions-=L  "remove left-hand scroll bar

autocmd VimEnter * :set number
autocmd BufEnter * :set number
autocmd BufEnter * :set nospell

"au GUIEnter * simalt ~x "x on an English Windows version. n on a French

if has('gui_running')
  set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
endif

set ttyfast
set lazyredraw

set mouse=a


let g:Powerline_symbols = 'fancy'

set nofoldenable                " disable code folding
let g:DisableAutoPHPFolding = 1 " disable PIV's folding

inoremap <Left>  <NOP>
inoremap <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap kj <Esc>

noremap <C-S> :update<CR>
nnoremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

noremap <C-Q> :q!<CR>
nnoremap <C-Q> :q!<CR>
vnoremap <C-Q> <C-C>:q!<CR>
inoremap <C-Q> <C-O>:q!<CR>


noremap <Leader>df gg=G``0
nnoremap <Leader>df gg=G``0
vnoremap <Leader>df <C-C>gg=G``0
inoremap <Leader>df <Esc>gg=G``I


let g:ws_isInPasteMode = 0

function! WSTogglePasteMode()
	if g:ws_isInPasteMode == 0
		set noautoindent
		set paste
		:startinsert
		let g:ws_isInPasteMode = 1
	else
		set autoindent
		set nopaste
		let g:ws_isInPasteMode = 0
	endif
endfunction


set pastetoggle=<F12>


" For local replace
nnoremap gr gd[{V%:s/<C-R>///gc<left><left><left>

" For global replace
" nnoremap gR gD:%s/<C-R>///gc<left><left><left>

function! Refactor()
    call inputsave()
    let @z=input("What do you want to rename '" . @z . "' to? ")
    call inputrestore()
endfunction
 
" Locally (local to block) rename a variable
nmap <Leader>rf "zyiw:call Refactor()<cr>mx:silent! norm gd<cr>[{V%:s/<C-R>//<c-r>z/g<cr>`x


function! BeautifyMyCode()
    let l:filename=expand("%:p")
	let l:tempFilename=expand("%:p").".temp"
    call system("php_beautifier --indent_tabs=1 --filters \"ArrayNested\" -f ".l:filename." -o ".l:tempFilename)
	
	normal ggdG
	execute("read ".l:tempFilename)
	normal ggdd``

	call system("rm ".l:tempFilename)
	""read !system('cat "'.l:tempFilename.'"')
	""let l:phpcs_list=split(l:phpcs_output, "\n")
    ""unlet l:phpcs_list[0]
    ""cexpr l:phpcs_list
    ""cwindow
endfunction

noremap <Leader>cf	:call BeautifyMyCode()<CR>
nnoremap <Leader>cf	:call BeautifyMyCode()<CR>
inoremap <Leader>cf	<Esc>:call BeautifyMyCode()<CR>

